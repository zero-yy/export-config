package sheet

type TempData struct {
	Sheets []*Sheet
}

const (
	goLoadTemplate = `// Code generated by export-config. DO NOT EDIT.
package conf

import (
	"fmt"
	"github.com/golang/protobuf/proto"
	"io/ioutil"
	"os"
	"path"
)

var (
{{- range .Sheets}}
	{{.CamelName}}Data = &{{.CamelName}}{}
{{- end}}
)

func initLoadFunc() {
{{- range .Sheets}}
	DataLoadFunc["{{.Name}}"] = func(dataPath string) {
		fullName := path.Join(dataPath, "{{.Name}}.bytes")
		fmt.Println(fullName)

		f, err := os.Open(fullName)
		panicIfErr(err)
		defer f.Close()

		buf, err := ioutil.ReadAll(f)
		panicIfErr(err)

		err = proto.Unmarshal(buf, {{.CamelName}}Data)
		panicIfErr(err)
	}
{{end}}
}

{{- range .Sheets}}
func Get{{.CamelName}}(id {{.IdColType}}) (*{{.CamelName}}_Record) {
	if d, ok := {{.CamelName}}Data.Records[id]; ok {return d} 
	return nil	
}	
{{- end}}
`
)

const (
	csharpLoadTemplate = `// Code generated by export-config. DO NOT EDIT.
namespace Config
{
	public static partial class CfgMgr
	{
		static void AddTables()
		{
{{- range .Sheets}}
			TableNames.Add("{{.Name}}");
{{- end}}
		}
		
{{- range .Sheets}}
		public static {{.Name}}.Types.Record GetById(this {{.Name}} obj, int id)
		{
			if (!obj.Records.ContainsKey(id))
			{
				return null;
			}
			return obj.Records[id];
		}
		public static {{.Name}}.Types.Record GetTestById(int id)
		{
			return GetTable<{{.Name}}>().GetById(id);
		}
	}
{{- end}}
}
`
)
