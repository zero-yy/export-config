// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: conf.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace conf {

  /// <summary>Holder for reflection information generated from conf.proto</summary>
  public static partial class ConfReflection {

    #region Descriptor
    /// <summary>File descriptor for conf.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ConfReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cgpjb25mLnByb3RvEgRDb25mIuoCCgR0ZXN0EigKB3JlY29yZHMYASADKAsy",
            "Fy5Db25mLnRlc3QuUmVjb3Jkc0VudHJ5Eg0KBWNyYzMyGAIgASgNGuUBCgZS",
            "ZWNvcmQSCgoCaWQYASABKAUSEwoLdGVzdF9zdHJpbmcYAiABKAkSFAoMdGVz",
            "dF9kZWZhdWx0GAMgASgJEhIKCnRlc3RfaW50MzIYBCABKAUSEwoLdGVzdF91",
            "aW50MzIYBSABKA0SEgoKdGVzdF9pbnQ2NBgGIAEoAxITCgt0ZXN0X3VpbnQ2",
            "NBgHIAEoBBIUCgx0ZXN0X2Zsb2F0MzIYCCABKAISFAoMdGVzdF9mbG9hdDY0",
            "GAkgASgBEhMKC3Rlc3RfZG91YmxlGAogASgBEhEKCXRlc3RfYXJ5cxgLIAMo",
            "BRpBCgxSZWNvcmRzRW50cnkSCwoDa2V5GAEgASgFEiAKBXZhbHVlGAIgASgL",
            "MhEuQ29uZi50ZXN0LlJlY29yZDoCOAEirgEKBXRlc3QyEikKB3JlY29yZHMY",
            "ASADKAsyGC5Db25mLnRlc3QyLlJlY29yZHNFbnRyeRINCgVjcmMzMhgCIAEo",
            "DRonCgZSZWNvcmQSCgoCaWQYASABKAkSEQoJdGVzdF9hcnlzGAIgAygFGkIK",
            "DFJlY29yZHNFbnRyeRILCgNrZXkYASABKAkSIQoFdmFsdWUYAiABKAsyEi5D",
            "b25mLnRlc3QyLlJlY29yZDoCOAEi7QIKBXRlc3QzEikKB3JlY29yZHMYASAD",
            "KAsyGC5Db25mLnRlc3QzLlJlY29yZHNFbnRyeRINCgVjcmMzMhgCIAEoDRrl",
            "AQoGUmVjb3JkEgoKAmlkGAEgASgFEhMKC3Rlc3Rfc3RyaW5nGAIgASgJEhQK",
            "DHRlc3RfZGVmYXVsdBgDIAEoCRISCgp0ZXN0X2ludDMyGAQgASgFEhMKC3Rl",
            "c3RfdWludDMyGAUgASgNEhIKCnRlc3RfaW50NjQYBiABKAMSEwoLdGVzdF91",
            "aW50NjQYByABKAQSFAoMdGVzdF9mbG9hdDMyGAggASgCEhQKDHRlc3RfZmxv",
            "YXQ2NBgJIAEoARITCgt0ZXN0X2RvdWJsZRgKIAEoARIRCgl0ZXN0X2FyeXMY",
            "CyADKAUaQgoMUmVjb3Jkc0VudHJ5EgsKA2tleRgBIAEoBRIhCgV2YWx1ZRgC",
            "IAEoCzISLkNvbmYudGVzdDMuUmVjb3JkOgI4AUINWgRjb25mqgIEY29uZmIG",
            "cHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::conf.test), global::conf.test.Parser, new[]{ "Records", "Crc32" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::conf.test.Types.Record), global::conf.test.Types.Record.Parser, new[]{ "Id", "TestString", "TestDefault", "TestInt32", "TestUint32", "TestInt64", "TestUint64", "TestFloat32", "TestFloat64", "TestDouble", "TestArys" }, null, null, null, null),
            null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::conf.test2), global::conf.test2.Parser, new[]{ "Records", "Crc32" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::conf.test2.Types.Record), global::conf.test2.Types.Record.Parser, new[]{ "Id", "TestArys" }, null, null, null, null),
            null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::conf.test3), global::conf.test3.Parser, new[]{ "Records", "Crc32" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::conf.test3.Types.Record), global::conf.test3.Types.Record.Parser, new[]{ "Id", "TestString", "TestDefault", "TestInt32", "TestUint32", "TestInt64", "TestUint64", "TestFloat32", "TestFloat64", "TestDouble", "TestArys" }, null, null, null, null),
            null, })
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class test : pb::IMessage<test> {
    private static readonly pb::MessageParser<test> _parser = new pb::MessageParser<test>(() => new test());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<test> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::conf.ConfReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public test() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public test(test other) : this() {
      records_ = other.records_.Clone();
      crc32_ = other.crc32_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public test Clone() {
      return new test(this);
    }

    /// <summary>Field number for the "records" field.</summary>
    public const int RecordsFieldNumber = 1;
    private static readonly pbc::MapField<int, global::conf.test.Types.Record>.Codec _map_records_codec
        = new pbc::MapField<int, global::conf.test.Types.Record>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::conf.test.Types.Record.Parser), 10);
    private readonly pbc::MapField<int, global::conf.test.Types.Record> records_ = new pbc::MapField<int, global::conf.test.Types.Record>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::conf.test.Types.Record> Records {
      get { return records_; }
    }

    /// <summary>Field number for the "crc32" field.</summary>
    public const int Crc32FieldNumber = 2;
    private uint crc32_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Crc32 {
      get { return crc32_; }
      set {
        crc32_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as test);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(test other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!Records.Equals(other.Records)) return false;
      if (Crc32 != other.Crc32) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= Records.GetHashCode();
      if (Crc32 != 0) hash ^= Crc32.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      records_.WriteTo(output, _map_records_codec);
      if (Crc32 != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Crc32);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += records_.CalculateSize(_map_records_codec);
      if (Crc32 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Crc32);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(test other) {
      if (other == null) {
        return;
      }
      records_.Add(other.records_);
      if (other.Crc32 != 0) {
        Crc32 = other.Crc32;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            records_.AddEntriesFrom(input, _map_records_codec);
            break;
          }
          case 16: {
            Crc32 = input.ReadUInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the test message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Record : pb::IMessage<Record> {
        private static readonly pb::MessageParser<Record> _parser = new pb::MessageParser<Record>(() => new Record());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Record> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::conf.test.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Record() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Record(Record other) : this() {
          id_ = other.id_;
          testString_ = other.testString_;
          testDefault_ = other.testDefault_;
          testInt32_ = other.testInt32_;
          testUint32_ = other.testUint32_;
          testInt64_ = other.testInt64_;
          testUint64_ = other.testUint64_;
          testFloat32_ = other.testFloat32_;
          testFloat64_ = other.testFloat64_;
          testDouble_ = other.testDouble_;
          testArys_ = other.testArys_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Record Clone() {
          return new Record(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private int id_;
        /// <summary>
        /// decorate:id
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Id {
          get { return id_; }
          set {
            id_ = value;
          }
        }

        /// <summary>Field number for the "test_string" field.</summary>
        public const int TestStringFieldNumber = 2;
        private string testString_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string TestString {
          get { return testString_; }
          set {
            testString_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "test_default" field.</summary>
        public const int TestDefaultFieldNumber = 3;
        private string testDefault_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string TestDefault {
          get { return testDefault_; }
          set {
            testDefault_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "test_int32" field.</summary>
        public const int TestInt32FieldNumber = 4;
        private int testInt32_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int TestInt32 {
          get { return testInt32_; }
          set {
            testInt32_ = value;
          }
        }

        /// <summary>Field number for the "test_uint32" field.</summary>
        public const int TestUint32FieldNumber = 5;
        private uint testUint32_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint TestUint32 {
          get { return testUint32_; }
          set {
            testUint32_ = value;
          }
        }

        /// <summary>Field number for the "test_int64" field.</summary>
        public const int TestInt64FieldNumber = 6;
        private long testInt64_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long TestInt64 {
          get { return testInt64_; }
          set {
            testInt64_ = value;
          }
        }

        /// <summary>Field number for the "test_uint64" field.</summary>
        public const int TestUint64FieldNumber = 7;
        private ulong testUint64_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong TestUint64 {
          get { return testUint64_; }
          set {
            testUint64_ = value;
          }
        }

        /// <summary>Field number for the "test_float32" field.</summary>
        public const int TestFloat32FieldNumber = 8;
        private float testFloat32_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float TestFloat32 {
          get { return testFloat32_; }
          set {
            testFloat32_ = value;
          }
        }

        /// <summary>Field number for the "test_float64" field.</summary>
        public const int TestFloat64FieldNumber = 9;
        private double testFloat64_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double TestFloat64 {
          get { return testFloat64_; }
          set {
            testFloat64_ = value;
          }
        }

        /// <summary>Field number for the "test_double" field.</summary>
        public const int TestDoubleFieldNumber = 10;
        private double testDouble_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double TestDouble {
          get { return testDouble_; }
          set {
            testDouble_ = value;
          }
        }

        /// <summary>Field number for the "test_arys" field.</summary>
        public const int TestArysFieldNumber = 11;
        private static readonly pb::FieldCodec<int> _repeated_testArys_codec
            = pb::FieldCodec.ForInt32(90);
        private readonly pbc::RepeatedField<int> testArys_ = new pbc::RepeatedField<int>();
        /// <summary>
        /// decorate:ary
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<int> TestArys {
          get { return testArys_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Record);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Record other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          if (TestString != other.TestString) return false;
          if (TestDefault != other.TestDefault) return false;
          if (TestInt32 != other.TestInt32) return false;
          if (TestUint32 != other.TestUint32) return false;
          if (TestInt64 != other.TestInt64) return false;
          if (TestUint64 != other.TestUint64) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TestFloat32, other.TestFloat32)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TestFloat64, other.TestFloat64)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TestDouble, other.TestDouble)) return false;
          if(!testArys_.Equals(other.testArys_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Id != 0) hash ^= Id.GetHashCode();
          if (TestString.Length != 0) hash ^= TestString.GetHashCode();
          if (TestDefault.Length != 0) hash ^= TestDefault.GetHashCode();
          if (TestInt32 != 0) hash ^= TestInt32.GetHashCode();
          if (TestUint32 != 0) hash ^= TestUint32.GetHashCode();
          if (TestInt64 != 0L) hash ^= TestInt64.GetHashCode();
          if (TestUint64 != 0UL) hash ^= TestUint64.GetHashCode();
          if (TestFloat32 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TestFloat32);
          if (TestFloat64 != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TestFloat64);
          if (TestDouble != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TestDouble);
          hash ^= testArys_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Id != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(Id);
          }
          if (TestString.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(TestString);
          }
          if (TestDefault.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(TestDefault);
          }
          if (TestInt32 != 0) {
            output.WriteRawTag(32);
            output.WriteInt32(TestInt32);
          }
          if (TestUint32 != 0) {
            output.WriteRawTag(40);
            output.WriteUInt32(TestUint32);
          }
          if (TestInt64 != 0L) {
            output.WriteRawTag(48);
            output.WriteInt64(TestInt64);
          }
          if (TestUint64 != 0UL) {
            output.WriteRawTag(56);
            output.WriteUInt64(TestUint64);
          }
          if (TestFloat32 != 0F) {
            output.WriteRawTag(69);
            output.WriteFloat(TestFloat32);
          }
          if (TestFloat64 != 0D) {
            output.WriteRawTag(73);
            output.WriteDouble(TestFloat64);
          }
          if (TestDouble != 0D) {
            output.WriteRawTag(81);
            output.WriteDouble(TestDouble);
          }
          testArys_.WriteTo(output, _repeated_testArys_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Id != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
          }
          if (TestString.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(TestString);
          }
          if (TestDefault.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(TestDefault);
          }
          if (TestInt32 != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(TestInt32);
          }
          if (TestUint32 != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TestUint32);
          }
          if (TestInt64 != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(TestInt64);
          }
          if (TestUint64 != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TestUint64);
          }
          if (TestFloat32 != 0F) {
            size += 1 + 4;
          }
          if (TestFloat64 != 0D) {
            size += 1 + 8;
          }
          if (TestDouble != 0D) {
            size += 1 + 8;
          }
          size += testArys_.CalculateSize(_repeated_testArys_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Record other) {
          if (other == null) {
            return;
          }
          if (other.Id != 0) {
            Id = other.Id;
          }
          if (other.TestString.Length != 0) {
            TestString = other.TestString;
          }
          if (other.TestDefault.Length != 0) {
            TestDefault = other.TestDefault;
          }
          if (other.TestInt32 != 0) {
            TestInt32 = other.TestInt32;
          }
          if (other.TestUint32 != 0) {
            TestUint32 = other.TestUint32;
          }
          if (other.TestInt64 != 0L) {
            TestInt64 = other.TestInt64;
          }
          if (other.TestUint64 != 0UL) {
            TestUint64 = other.TestUint64;
          }
          if (other.TestFloat32 != 0F) {
            TestFloat32 = other.TestFloat32;
          }
          if (other.TestFloat64 != 0D) {
            TestFloat64 = other.TestFloat64;
          }
          if (other.TestDouble != 0D) {
            TestDouble = other.TestDouble;
          }
          testArys_.Add(other.testArys_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Id = input.ReadInt32();
                break;
              }
              case 18: {
                TestString = input.ReadString();
                break;
              }
              case 26: {
                TestDefault = input.ReadString();
                break;
              }
              case 32: {
                TestInt32 = input.ReadInt32();
                break;
              }
              case 40: {
                TestUint32 = input.ReadUInt32();
                break;
              }
              case 48: {
                TestInt64 = input.ReadInt64();
                break;
              }
              case 56: {
                TestUint64 = input.ReadUInt64();
                break;
              }
              case 69: {
                TestFloat32 = input.ReadFloat();
                break;
              }
              case 73: {
                TestFloat64 = input.ReadDouble();
                break;
              }
              case 81: {
                TestDouble = input.ReadDouble();
                break;
              }
              case 90:
              case 88: {
                testArys_.AddEntriesFrom(input, _repeated_testArys_codec);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class test2 : pb::IMessage<test2> {
    private static readonly pb::MessageParser<test2> _parser = new pb::MessageParser<test2>(() => new test2());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<test2> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::conf.ConfReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public test2() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public test2(test2 other) : this() {
      records_ = other.records_.Clone();
      crc32_ = other.crc32_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public test2 Clone() {
      return new test2(this);
    }

    /// <summary>Field number for the "records" field.</summary>
    public const int RecordsFieldNumber = 1;
    private static readonly pbc::MapField<string, global::conf.test2.Types.Record>.Codec _map_records_codec
        = new pbc::MapField<string, global::conf.test2.Types.Record>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::conf.test2.Types.Record.Parser), 10);
    private readonly pbc::MapField<string, global::conf.test2.Types.Record> records_ = new pbc::MapField<string, global::conf.test2.Types.Record>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::conf.test2.Types.Record> Records {
      get { return records_; }
    }

    /// <summary>Field number for the "crc32" field.</summary>
    public const int Crc32FieldNumber = 2;
    private uint crc32_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Crc32 {
      get { return crc32_; }
      set {
        crc32_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as test2);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(test2 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!Records.Equals(other.Records)) return false;
      if (Crc32 != other.Crc32) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= Records.GetHashCode();
      if (Crc32 != 0) hash ^= Crc32.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      records_.WriteTo(output, _map_records_codec);
      if (Crc32 != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Crc32);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += records_.CalculateSize(_map_records_codec);
      if (Crc32 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Crc32);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(test2 other) {
      if (other == null) {
        return;
      }
      records_.Add(other.records_);
      if (other.Crc32 != 0) {
        Crc32 = other.Crc32;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            records_.AddEntriesFrom(input, _map_records_codec);
            break;
          }
          case 16: {
            Crc32 = input.ReadUInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the test2 message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Record : pb::IMessage<Record> {
        private static readonly pb::MessageParser<Record> _parser = new pb::MessageParser<Record>(() => new Record());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Record> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::conf.test2.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Record() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Record(Record other) : this() {
          id_ = other.id_;
          testArys_ = other.testArys_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Record Clone() {
          return new Record(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private string id_ = "";
        /// <summary>
        /// decorate:id
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Id {
          get { return id_; }
          set {
            id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "test_arys" field.</summary>
        public const int TestArysFieldNumber = 2;
        private static readonly pb::FieldCodec<int> _repeated_testArys_codec
            = pb::FieldCodec.ForInt32(18);
        private readonly pbc::RepeatedField<int> testArys_ = new pbc::RepeatedField<int>();
        /// <summary>
        /// decorate:ary
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<int> TestArys {
          get { return testArys_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Record);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Record other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          if(!testArys_.Equals(other.testArys_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Id.Length != 0) hash ^= Id.GetHashCode();
          hash ^= testArys_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Id.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Id);
          }
          testArys_.WriteTo(output, _repeated_testArys_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Id.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
          }
          size += testArys_.CalculateSize(_repeated_testArys_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Record other) {
          if (other == null) {
            return;
          }
          if (other.Id.Length != 0) {
            Id = other.Id;
          }
          testArys_.Add(other.testArys_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Id = input.ReadString();
                break;
              }
              case 18:
              case 16: {
                testArys_.AddEntriesFrom(input, _repeated_testArys_codec);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class test3 : pb::IMessage<test3> {
    private static readonly pb::MessageParser<test3> _parser = new pb::MessageParser<test3>(() => new test3());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<test3> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::conf.ConfReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public test3() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public test3(test3 other) : this() {
      records_ = other.records_.Clone();
      crc32_ = other.crc32_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public test3 Clone() {
      return new test3(this);
    }

    /// <summary>Field number for the "records" field.</summary>
    public const int RecordsFieldNumber = 1;
    private static readonly pbc::MapField<int, global::conf.test3.Types.Record>.Codec _map_records_codec
        = new pbc::MapField<int, global::conf.test3.Types.Record>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::conf.test3.Types.Record.Parser), 10);
    private readonly pbc::MapField<int, global::conf.test3.Types.Record> records_ = new pbc::MapField<int, global::conf.test3.Types.Record>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::conf.test3.Types.Record> Records {
      get { return records_; }
    }

    /// <summary>Field number for the "crc32" field.</summary>
    public const int Crc32FieldNumber = 2;
    private uint crc32_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Crc32 {
      get { return crc32_; }
      set {
        crc32_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as test3);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(test3 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!Records.Equals(other.Records)) return false;
      if (Crc32 != other.Crc32) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= Records.GetHashCode();
      if (Crc32 != 0) hash ^= Crc32.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      records_.WriteTo(output, _map_records_codec);
      if (Crc32 != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Crc32);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += records_.CalculateSize(_map_records_codec);
      if (Crc32 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Crc32);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(test3 other) {
      if (other == null) {
        return;
      }
      records_.Add(other.records_);
      if (other.Crc32 != 0) {
        Crc32 = other.Crc32;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            records_.AddEntriesFrom(input, _map_records_codec);
            break;
          }
          case 16: {
            Crc32 = input.ReadUInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the test3 message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Record : pb::IMessage<Record> {
        private static readonly pb::MessageParser<Record> _parser = new pb::MessageParser<Record>(() => new Record());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Record> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::conf.test3.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Record() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Record(Record other) : this() {
          id_ = other.id_;
          testString_ = other.testString_;
          testDefault_ = other.testDefault_;
          testInt32_ = other.testInt32_;
          testUint32_ = other.testUint32_;
          testInt64_ = other.testInt64_;
          testUint64_ = other.testUint64_;
          testFloat32_ = other.testFloat32_;
          testFloat64_ = other.testFloat64_;
          testDouble_ = other.testDouble_;
          testArys_ = other.testArys_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Record Clone() {
          return new Record(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private int id_;
        /// <summary>
        /// decorate:id
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int Id {
          get { return id_; }
          set {
            id_ = value;
          }
        }

        /// <summary>Field number for the "test_string" field.</summary>
        public const int TestStringFieldNumber = 2;
        private string testString_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string TestString {
          get { return testString_; }
          set {
            testString_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "test_default" field.</summary>
        public const int TestDefaultFieldNumber = 3;
        private string testDefault_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string TestDefault {
          get { return testDefault_; }
          set {
            testDefault_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "test_int32" field.</summary>
        public const int TestInt32FieldNumber = 4;
        private int testInt32_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int TestInt32 {
          get { return testInt32_; }
          set {
            testInt32_ = value;
          }
        }

        /// <summary>Field number for the "test_uint32" field.</summary>
        public const int TestUint32FieldNumber = 5;
        private uint testUint32_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint TestUint32 {
          get { return testUint32_; }
          set {
            testUint32_ = value;
          }
        }

        /// <summary>Field number for the "test_int64" field.</summary>
        public const int TestInt64FieldNumber = 6;
        private long testInt64_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long TestInt64 {
          get { return testInt64_; }
          set {
            testInt64_ = value;
          }
        }

        /// <summary>Field number for the "test_uint64" field.</summary>
        public const int TestUint64FieldNumber = 7;
        private ulong testUint64_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong TestUint64 {
          get { return testUint64_; }
          set {
            testUint64_ = value;
          }
        }

        /// <summary>Field number for the "test_float32" field.</summary>
        public const int TestFloat32FieldNumber = 8;
        private float testFloat32_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float TestFloat32 {
          get { return testFloat32_; }
          set {
            testFloat32_ = value;
          }
        }

        /// <summary>Field number for the "test_float64" field.</summary>
        public const int TestFloat64FieldNumber = 9;
        private double testFloat64_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double TestFloat64 {
          get { return testFloat64_; }
          set {
            testFloat64_ = value;
          }
        }

        /// <summary>Field number for the "test_double" field.</summary>
        public const int TestDoubleFieldNumber = 10;
        private double testDouble_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double TestDouble {
          get { return testDouble_; }
          set {
            testDouble_ = value;
          }
        }

        /// <summary>Field number for the "test_arys" field.</summary>
        public const int TestArysFieldNumber = 11;
        private static readonly pb::FieldCodec<int> _repeated_testArys_codec
            = pb::FieldCodec.ForInt32(90);
        private readonly pbc::RepeatedField<int> testArys_ = new pbc::RepeatedField<int>();
        /// <summary>
        /// decorate:ary
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<int> TestArys {
          get { return testArys_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Record);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Record other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          if (TestString != other.TestString) return false;
          if (TestDefault != other.TestDefault) return false;
          if (TestInt32 != other.TestInt32) return false;
          if (TestUint32 != other.TestUint32) return false;
          if (TestInt64 != other.TestInt64) return false;
          if (TestUint64 != other.TestUint64) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TestFloat32, other.TestFloat32)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TestFloat64, other.TestFloat64)) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(TestDouble, other.TestDouble)) return false;
          if(!testArys_.Equals(other.testArys_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Id != 0) hash ^= Id.GetHashCode();
          if (TestString.Length != 0) hash ^= TestString.GetHashCode();
          if (TestDefault.Length != 0) hash ^= TestDefault.GetHashCode();
          if (TestInt32 != 0) hash ^= TestInt32.GetHashCode();
          if (TestUint32 != 0) hash ^= TestUint32.GetHashCode();
          if (TestInt64 != 0L) hash ^= TestInt64.GetHashCode();
          if (TestUint64 != 0UL) hash ^= TestUint64.GetHashCode();
          if (TestFloat32 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TestFloat32);
          if (TestFloat64 != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TestFloat64);
          if (TestDouble != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(TestDouble);
          hash ^= testArys_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Id != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(Id);
          }
          if (TestString.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(TestString);
          }
          if (TestDefault.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(TestDefault);
          }
          if (TestInt32 != 0) {
            output.WriteRawTag(32);
            output.WriteInt32(TestInt32);
          }
          if (TestUint32 != 0) {
            output.WriteRawTag(40);
            output.WriteUInt32(TestUint32);
          }
          if (TestInt64 != 0L) {
            output.WriteRawTag(48);
            output.WriteInt64(TestInt64);
          }
          if (TestUint64 != 0UL) {
            output.WriteRawTag(56);
            output.WriteUInt64(TestUint64);
          }
          if (TestFloat32 != 0F) {
            output.WriteRawTag(69);
            output.WriteFloat(TestFloat32);
          }
          if (TestFloat64 != 0D) {
            output.WriteRawTag(73);
            output.WriteDouble(TestFloat64);
          }
          if (TestDouble != 0D) {
            output.WriteRawTag(81);
            output.WriteDouble(TestDouble);
          }
          testArys_.WriteTo(output, _repeated_testArys_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Id != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
          }
          if (TestString.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(TestString);
          }
          if (TestDefault.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(TestDefault);
          }
          if (TestInt32 != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(TestInt32);
          }
          if (TestUint32 != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TestUint32);
          }
          if (TestInt64 != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(TestInt64);
          }
          if (TestUint64 != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TestUint64);
          }
          if (TestFloat32 != 0F) {
            size += 1 + 4;
          }
          if (TestFloat64 != 0D) {
            size += 1 + 8;
          }
          if (TestDouble != 0D) {
            size += 1 + 8;
          }
          size += testArys_.CalculateSize(_repeated_testArys_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Record other) {
          if (other == null) {
            return;
          }
          if (other.Id != 0) {
            Id = other.Id;
          }
          if (other.TestString.Length != 0) {
            TestString = other.TestString;
          }
          if (other.TestDefault.Length != 0) {
            TestDefault = other.TestDefault;
          }
          if (other.TestInt32 != 0) {
            TestInt32 = other.TestInt32;
          }
          if (other.TestUint32 != 0) {
            TestUint32 = other.TestUint32;
          }
          if (other.TestInt64 != 0L) {
            TestInt64 = other.TestInt64;
          }
          if (other.TestUint64 != 0UL) {
            TestUint64 = other.TestUint64;
          }
          if (other.TestFloat32 != 0F) {
            TestFloat32 = other.TestFloat32;
          }
          if (other.TestFloat64 != 0D) {
            TestFloat64 = other.TestFloat64;
          }
          if (other.TestDouble != 0D) {
            TestDouble = other.TestDouble;
          }
          testArys_.Add(other.testArys_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Id = input.ReadInt32();
                break;
              }
              case 18: {
                TestString = input.ReadString();
                break;
              }
              case 26: {
                TestDefault = input.ReadString();
                break;
              }
              case 32: {
                TestInt32 = input.ReadInt32();
                break;
              }
              case 40: {
                TestUint32 = input.ReadUInt32();
                break;
              }
              case 48: {
                TestInt64 = input.ReadInt64();
                break;
              }
              case 56: {
                TestUint64 = input.ReadUInt64();
                break;
              }
              case 69: {
                TestFloat32 = input.ReadFloat();
                break;
              }
              case 73: {
                TestFloat64 = input.ReadDouble();
                break;
              }
              case 81: {
                TestDouble = input.ReadDouble();
                break;
              }
              case 90:
              case 88: {
                testArys_.AddEntriesFrom(input, _repeated_testArys_codec);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
