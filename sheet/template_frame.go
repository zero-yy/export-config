package sheet

var (
	// file path -> file content
	goGenFrame = map[string]string{
		//=================
		"cmd/gendata/main.go": `// Code generated by export-config. DO NOT EDIT.
package main

import (
	"flag"
	conf "github.com/zero-yy/export-config/test/go/gen"
)

var (
	inputExcelPath       = flag.String("input", "", "path of input excel")
	outputDataGoPath     = flag.String("outg", "", "path of output data go")
	outputDataCsharpPath = flag.String("outcs", "", "path of output data csharp")
)

func main() {
	flag.Parse()

	conf.MustSave(*inputExcelPath, *outputDataGoPath)
}
	
`,

		//=================
		"conf_loader.go": `// Code generated by export-config. DO NOT EDIT.
package conf

import (
	"sort"
)

func panicIfErr(err error) {
	if err != nil {
		panic(err)
	}
}

// sheet name -> loader
// Could use for hot load outside!
var DataLoadFunc = make(map[string]func(dataPath string))

func MustLoad(dataPath string) {
	initLoadFunc()

	// Load by order!
	names := make([]string, 0)
	for n, _ := range DataLoadFunc {
		names = append(names, n)
	}
	sort.Strings(names)

	for _, n := range names {
		DataLoadFunc[n](dataPath)
	}
}

`,

		//=================
		"conf_saver.go": `// Code generated by export-config. DO NOT EDIT.
package conf

import (
	"encoding/json"
	"github.com/golang/protobuf/proto"
	"github.com/zero-yy/export-config/sheet"
	"io/ioutil"
	"os"
)

// sheet name -> saver
var DataSaveFunc = make(map[string]func(s *sheet.Sheet, outputPath string))

// excel data -> pb bytes
func MustSave(inputPath, outputPath string) {
	initSaveFunc()
	save(inputPath, outputPath)
}

func save(inputPath, outputPath string) {
	sheets := sheet.CreateSheets(inputPath)
	for _, s := range sheets {
		DataSaveFunc[s.Name](s, outputPath)
	}
}

func saveJson(m proto.Message, fullName string) {
	b, err := json.MarshalIndent(m, "", "  ")
	panicIfErr(err)

	err = ioutil.WriteFile(fullName, b, os.ModePerm)
	panicIfErr(err)
}

func saveBytes(m proto.Message, fullName string) {
	buf := proto.NewBuffer(nil)
	buf.SetDeterministic(true)
	err := buf.Marshal(m)
	panicIfErr(err)

	// TODO...
	//m.Crc32 = crc32.ChecksumIEEE(buf.Bytes())

	// recalculate with right crc32!
	buf = proto.NewBuffer(nil)
	buf.SetDeterministic(true)
	err = buf.Marshal(m)
	panicIfErr(err)

	err = ioutil.WriteFile(fullName, buf.Bytes(), os.ModePerm)
	panicIfErr(err)
}

`,
	}
)

var (
	// file path -> file content
	csGenFrame = map[string]string{}
)
