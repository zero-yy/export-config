package sheet

const (
	goSaveTemplate = `// Code generated by export-config. DO NOT EDIT.
package conf

import (
	"fmt"
	"github.com/zero-yy/export-config/sheet"
	"path"
)

func initSaveFunc() {
{{- range .Sheets}}
	DataSaveFunc["{{.Name}}"] = func(s *sheet.Sheet, outputPath string) {
		m := &{{.CamelName}}{
			Records: make(map[{{.IdColType}}]*{{.CamelName}}_Record),
			Crc32:   0,
		}

		// load from s to m
		for rowIndex := sheet.KDataRowStart; rowIndex < s.Xs.MaxRow; rowIndex++ {
			rowData := s.Xs.Row(rowIndex)

			if s.IdColIndex >= len(rowData.Cells) {
				break
			}

			// Id data is nil then skip this row.
			if len(rowData.Cells[s.IdColIndex].Value) == 0 {
				continue
			}

			record := &{{.CamelName}}_Record{}

			s.ParseRecordData(rowIndex, rowData, record)

			if _, ok := m.Records[record.{{.CamelId}}]; ok {
				panicIfErr(fmt.Errorf("repeat id(%v) in sheet(%v) cell(%v)",
					record.{{.CamelId}}, s.Name, sheet.CellName(int32(rowIndex), int32(s.IdColIndex))))
			}
			m.Records[record.{{.CamelId}}] = record
		}

		fullName := path.Join(outputPath, "{{.Name}}.bytes")
		saveBytes(m, fullName)

		fullName = path.Join(outputPath, "{{.Name}}.json")
		saveJson(m, fullName)
	}
{{end}}
}
`
)
