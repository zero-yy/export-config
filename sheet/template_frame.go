package sheet

var (
	// file path -> file content
	goGenFrame = map[string]string{
		//=================
		"cmd/gendata/main.go": `// Code generated by export-config. DO NOT EDIT.
package main

import (
	"flag"
	"fmt"
	"github.com/zero-yy/export-config/config"
	"{{.GoPackageFullPath}}"
)

var (
	configFileName = flag.String("config", "./default.toml", "config file")
)

func main() {
	flag.Parse()
	fmt.Printf("start run gendata --config=%s\n", *configFileName)

	config.MustInit(*configFileName)

	conf.MustSave(config.C.InputExcelPath, config.C.OutputDataGoPath)
	conf.MustSave(config.C.InputExcelPath, config.C.OutputDataCSharpPath)
}
`,

		//=================
		"conf_loader.go": `// Code generated by export-config. DO NOT EDIT.
package conf

import (
	"sort"
)

func panicIfErr(err error) {
	if err != nil {
		panic(err)
	}
}

// sheet name -> loader
// Could use for hot load outside!
var DataLoadFunc = make(map[string]func(dataPath string))

func MustLoad(dataPath string) {
	initLoadFunc()

	// Load by order!
	names := make([]string, 0)
	for n, _ := range DataLoadFunc {
		names = append(names, n)
	}
	sort.Strings(names)

	for _, n := range names {
		DataLoadFunc[n](dataPath)
	}
}

`,

		//=================
		"conf_saver.go": `// Code generated by export-config. DO NOT EDIT.
package conf

import (
	"encoding/json"
	"github.com/golang/protobuf/proto"
	"github.com/zero-yy/export-config/sheet"
	"io/ioutil"
	"os"
)

// sheet name -> saver
var DataSaveFunc = make(map[string]func(s *sheet.Sheet, outputPath string))

// excel data -> pb bytes
func MustSave(inputPath, outputPath string) {
	initSaveFunc()
	save(inputPath, outputPath)
}

func save(inputPath, outputPath string) {
	sheets := sheet.CreateSheets(inputPath)
	for _, s := range sheets {
		DataSaveFunc[s.Name](s, outputPath)
	}
}

// json 文件名做特殊处理，在Unity里，同目录下同文件名可能会产生诡异问题
func saveJson(m proto.Message, fullName string) {
	b, err := json.MarshalIndent(m, "", "  ")
	panicIfErr(err)

	err = ioutil.WriteFile(fullName, b, os.ModePerm)
	panicIfErr(err)
}

func saveBytes(m proto.Message, fullName string) {
	buf := proto.NewBuffer(nil)
	buf.SetDeterministic(true)
	err := buf.Marshal(m)
	panicIfErr(err)

	// TODO...
	//m.Crc32 = crc32.ChecksumIEEE(buf.Bytes())

	// recalculate with right crc32!
	buf = proto.NewBuffer(nil)
	buf.SetDeterministic(true)
	err = buf.Marshal(m)
	panicIfErr(err)

	err = ioutil.WriteFile(fullName, buf.Bytes(), os.ModePerm)
	panicIfErr(err)
}

`,
	}
)

var (
	// file path -> file content
	csGenFrame = map[string]string{}
)
